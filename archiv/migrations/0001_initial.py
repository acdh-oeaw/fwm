# Generated by Django 3.2.8 on 2021-11-01 14:15

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('vocabs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Artifact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('description', models.TextField(blank=True, help_text='description of the artefact', null=True, verbose_name='description')),
                ('find_spot_extra', models.TextField(blank=True, help_text='additional notes of the find spot', null=True, verbose_name='find spot notes')),
                ('measurement', models.TextField(blank=True, help_text='measurement information of the artefact', null=True, verbose_name='measurement')),
                ('preservation', models.TextField(blank=True, help_text='preservation information', null=True, verbose_name='preservation')),
                ('images', models.CharField(blank=True, help_text='images of the artefact', max_length=250, verbose_name='images')),
                ('literature', models.CharField(blank=True, help_text='literature', max_length=250, verbose_name='literature')),
                ('orig_data_csv', models.TextField(blank=True, null=True, verbose_name='The original data')),
                ('artefact_type', models.ForeignKey(blank=True, help_text='type of the artefact; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_artifact_artefact_type_skosconcept', to='vocabs.skosconcept', verbose_name='artefact type')),
                ('dating', models.ForeignKey(blank=True, help_text='dating information; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_artifact_dating_skosconcept', to='vocabs.skosconcept', verbose_name='dating')),
            ],
            options={
                'verbose_name': 'Artifact',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Geography',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('identifier', models.CharField(blank=True, help_text='identifier of the geographic location; gazetteers', max_length=250, verbose_name='identifier')),
                ('coordinates', models.TextField(blank=True, help_text='coordinates of the geographic location', null=True, verbose_name='coordinates')),
                ('notes', models.TextField(blank=True, help_text='additional notes', null=True, verbose_name='notes')),
                ('orig_data_csv', models.TextField(blank=True, null=True, verbose_name='The original data')),
                ('contintent', models.ForeignKey(blank=True, help_text='continent of the geographic location; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geography_contintent_skosconcept', to='vocabs.skosconcept', verbose_name='continent')),
                ('land', models.ForeignKey(blank=True, help_text='land of the geographic location; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geography_land_skosconcept', to='vocabs.skosconcept', verbose_name='land')),
                ('location', models.ForeignKey(blank=True, help_text='location of the geographic location; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geography_location_skosconcept', to='vocabs.skosconcept', verbose_name='location')),
                ('name', models.ForeignKey(blank=True, help_text='name of the geographic location; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geography_name_skosconcept', to='vocabs.skosconcept', verbose_name='name')),
                ('province', models.ForeignKey(blank=True, help_text='province of the geographic location; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geography_province_skosconcept', to='vocabs.skosconcept', verbose_name='province')),
            ],
            options={
                'verbose_name': 'Geography',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('name', models.CharField(blank=True, help_text='name of the institution', max_length=250, verbose_name='name')),
                ('identifier', models.CharField(blank=True, help_text='identifier of the institution; gazetteers', max_length=250, verbose_name='identifier')),
                ('orig_data_csv', models.TextField(blank=True, null=True, verbose_name='The original data')),
            ],
            options={
                'verbose_name': 'Insititution',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Quarry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('name', models.CharField(blank=True, help_text='name of the quarry', max_length=250, verbose_name='name')),
                ('images', models.CharField(blank=True, help_text='images', max_length=250, verbose_name='images')),
                ('description', models.TextField(blank=True, help_text='description of the quarry', null=True, verbose_name='description')),
                ('literature', models.CharField(blank=True, help_text='literature', max_length=250, verbose_name='literature')),
                ('orig_data_csv', models.TextField(blank=True, null=True, verbose_name='The original data')),
                ('geography', models.ForeignKey(blank=True, help_text='geographical location of the quarry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_quarry_geography_geography', to='archiv.geography', verbose_name='geographical location')),
            ],
            options={
                'verbose_name': 'Quarry',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='QuarryGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('name', models.CharField(blank=True, help_text='name of the quarry group', max_length=250, verbose_name='name')),
                ('description', models.TextField(blank=True, help_text='description of the quarry group', null=True, verbose_name='description')),
                ('orig_data_csv', models.TextField(blank=True, null=True, verbose_name='The original data')),
            ],
            options={
                'verbose_name': 'QuarryGroup',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('oeai_inventory_number', models.CharField(blank=True, help_text='OeAI inventory number; unique', max_length=250, verbose_name='OeAI inventory number')),
                ('color_description', models.TextField(blank=True, help_text='precise description of the color', null=True, verbose_name='color description')),
                ('color_kodak', models.CharField(blank=True, help_text='more detailed information about the kodak color', max_length=250, verbose_name='color kodak')),
                ('stdcolor', models.CharField(blank=True, help_text='more detailed information about the kodak color', max_length=250, verbose_name='color stdcolor')),
                ('notes', models.TextField(blank=True, help_text='notes', null=True, verbose_name='notes')),
                ('sampling', models.CharField(blank=True, help_text='information about the sampling', max_length=250, verbose_name='sampling')),
                ('literature', models.CharField(blank=True, help_text='literature', max_length=250, verbose_name='literature')),
                ('image', models.CharField(blank=True, help_text='images', max_length=250, verbose_name='images')),
                ('orig_data_csv', models.TextField(blank=True, null=True, verbose_name='The original data')),
                ('artefakt_id', models.ForeignKey(blank=True, help_text='sampled artefact', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_sample_artefakt_id_artifact', to='archiv.artifact', verbose_name='artefact')),
                ('color', models.ForeignKey(blank=True, help_text='color of the sample; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_sample_color_skosconcept', to='vocabs.skosconcept', verbose_name='color')),
                ('grain_size_max', models.ForeignKey(blank=True, help_text='maximum grain size; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_sample_grain_size_max_skosconcept', to='vocabs.skosconcept', verbose_name='grain size max')),
                ('grain_size_min', models.ForeignKey(blank=True, help_text='minimum grain size; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_sample_grain_size_min_skosconcept', to='vocabs.skosconcept', verbose_name='grain size min')),
                ('material', models.ForeignKey(blank=True, help_text='material of the sample; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_sample_material_skosconcept', to='vocabs.skosconcept', verbose_name='material')),
                ('quarry', models.ForeignKey(blank=True, help_text='sampled quarry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_sample_quarry_quarry', to='archiv.quarry', verbose_name='quarry')),
                ('quarry_group', models.ForeignKey(blank=True, help_text='quarry group', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_sample_quarry_group_quarrygroup', to='archiv.quarrygroup', verbose_name='quarry group')),
                ('smell', models.ForeignKey(blank=True, help_text='smell of the sample; entries from 0 to 4', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_sample_smell_skosconcept', to='vocabs.skosconcept', verbose_name='smell')),
            ],
            options={
                'verbose_name': 'Sample',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Number',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('number', models.CharField(blank=True, help_text='other number', max_length=250, verbose_name='number')),
                ('notes', models.TextField(blank=True, help_text='additional notes', null=True, verbose_name='notes')),
                ('orig_data_csv', models.TextField(blank=True, null=True, verbose_name='The original data')),
                ('institute', models.ForeignKey(blank=True, help_text='institute that assigned then number', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_number_institute_institution', to='archiv.institution', verbose_name='institute')),
                ('number_type', models.ForeignKey(blank=True, help_text='type of the number; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_number_number_type_skosconcept', to='vocabs.skosconcept', verbose_name='number type')),
                ('oeai_inventory_number', models.ForeignKey(blank=True, help_text='OeAI inventory number', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_number_oeai_inventory_number_sample', to='archiv.sample', verbose_name='OeAI inventory number')),
            ],
            options={
                'verbose_name': 'Number',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='artifact',
            name='find_spot',
            field=models.ForeignKey(blank=True, help_text='find spot of the artefact ', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_artifact_find_spot_geography', to='archiv.geography', verbose_name='find spot'),
        ),
        migrations.AddField(
            model_name='artifact',
            name='material',
            field=models.ForeignKey(blank=True, help_text='the artefacts material; controlled vocabulary', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_artifact_material_skosconcept', to='vocabs.skosconcept', verbose_name='material'),
        ),
        migrations.AddField(
            model_name='artifact',
            name='storage_place',
            field=models.ForeignKey(blank=True, help_text='storage institution', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_artifact_storage_place_institution', to='archiv.institution', verbose_name='storage place'),
        ),
        migrations.CreateModel(
            name='Analyse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('date', models.DateField(blank=True, help_text='analyse date', null=True, verbose_name='date')),
                ('notes_thinsection', models.TextField(blank=True, help_text='helptext for notes_thinsection', null=True, verbose_name='thinsection notes')),
                ('orig_data_csv', models.TextField(blank=True, null=True, verbose_name='The original data')),
                ('analyse_type', models.ForeignKey(blank=True, help_text='analyse typ', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_analyse_analyse_type_skosconcept', to='vocabs.skosconcept', verbose_name='analyse typ')),
                ('institute', models.ForeignKey(blank=True, help_text='institute where the analysis took place', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_analyse_institute_institution', to='archiv.institution', verbose_name='institute')),
                ('oeai_inventory_number', models.ForeignKey(blank=True, help_text='OeAI inventory number; unique', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_analyse_oeai_inventory_number_sample', to='archiv.sample', verbose_name='OeAI inventory number')),
            ],
            options={
                'verbose_name': 'Analyse',
                'ordering': ['id'],
            },
        ),
    ]
