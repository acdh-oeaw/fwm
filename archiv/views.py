# generated by appcreator
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse
from django.contrib.auth.mixins import PermissionRequiredMixin
from django.core.serializers import serialize
from django.utils.decorators import method_decorator
from django.urls import reverse_lazy
from django.views.generic.edit import DeleteView
from django.views.generic import TemplateView
from django_celery_results.models import TaskResult
from . filters import (
    AnalyseListFilter,
    ArtifactListFilter,
    GeographyListFilter,
    InstitutionListFilter,
    NumberListFilter,
    QuarryListFilter,
    QuarryGroupListFilter,
    SampleListFilter,
    ProjectListFilter
)
from . forms import (
    AnalyseForm, AnalyseFilterFormHelper,
    ArtifactForm, ArtifactFilterFormHelper,
    GeographyForm, GeographyFilterFormHelper,
    InstitutionForm, InstitutionFilterFormHelper,
    NumberForm, NumberFilterFormHelper,
    QuarryForm, QuarryFilterFormHelper,
    QuarryGroupForm, QuarryGroupFilterFormHelper,
    SampleForm, SampleFilterFormHelper,
    ProjectForm, ProjectFilterFormHelper
)
from . tables import (
    AnalyseTable,
    ArtifactTable,
    GeographyTable,
    InstitutionTable,
    NumberTable,
    QuarryTable,
    QuarryGroupTable,
    SampleTable,
    ProjectTable
)
from . models import (
    Analyse,
    Artifact,
    Geography,
    Institution,
    Number,
    Quarry,
    QuarryGroup,
    Sample,
    Project,
    Image
)
from browsing.browsing_utils import (
    GenericListView, BaseCreateView, BaseUpdateView, BaseDetailView
)

from archiv.tasks import count_geography


class AnalyseListView(GenericListView):

    model = Analyse
    filter_class = AnalyseListFilter
    formhelper_class = AnalyseFilterFormHelper
    table_class = AnalyseTable
    init_columns = [
        'id', 'oeai_inventory_number', 'analyse_type'
    ]
    # hier fehlt die 端berpr端fung ob der User eingeloggt ist oder nicht
    exclude_columns = ['legacy_pk', 'fe', 'ion_f', 'notes_thinsections', 'mgco3','mn', 'sr', 'ion_li', 'ion_na',
                        'ion_k', 'ion_mg','ion_ca','ion_cl','ion_br','ion_j', 'ion_no3','ion_so4','ion_li_na',
                        'ion_k_na','ion_cl_na','ion_br_na','ion_i_na','ion_so4_na','ion_f_na','ion_no3_na', 
                        'iso_d18o','iso_d13c','icp_mg','icp_mn','icp_fe','icp_sr','icp_cr','icp_cr_n2o','icp_v',
                        'icp_y','icp_cd','icp_ba','icp_la','icp_ce','icp_pr','icp_dy','icp_ho','icp_yb','icp_pb',
                        'icp_u', 'notes_thinsection', 'epr_spectrometer', 'epr_spectral_height', 'epr_dolom', 
                        'epr_tot6', 'epr_spli', 'epr_int', 'epr_spread', 'epr_w', 'epr_stdintens', 'epr_stdintegr', 
                        'epr_stdw','epr_stdspli','pr_stdspread', 'epr_intens_standardised','epr_integr_standardised',
                        'epr_spli_standardised''epr_w_standardised', 'epr_spread_standardised','orig_data_csv',
                        'epr_stdspread', 'epr_spli_standardised', 'epr_w_standardised']
    
    ordering=['oeai_inventory_number']
    enable_merge = False


class AnalyseDetailView(BaseDetailView):

    model = Analyse
    template_name = 'archiv/generic_detail.html'


class AnalyseCreate(BaseCreateView):

    model = Analyse
    form_class = AnalyseForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AnalyseCreate, self).dispatch(*args, **kwargs)


class AnalyseUpdate(BaseUpdateView):

    model = Analyse
    form_class = AnalyseForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AnalyseUpdate, self).dispatch(*args, **kwargs)


class AnalyseDelete(DeleteView):
    model = Analyse
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:analyse_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AnalyseDelete, self).dispatch(*args, **kwargs)


class ArtifactListView(GenericListView):

    model = Artifact
    filter_class = ArtifactListFilter
    formhelper_class = ArtifactFilterFormHelper
    table_class = ArtifactTable
    init_columns = [
        'id','artefact_type','material','find_spot','storage_place'
    ]
    # hier fehlt die 端berpr端fung ob der User eingeloggt ist oder nicht
    exclude_columns = ['legacy_pk', 'description', 'find_spot_extra', 'measurement', 'preservation', 
                       'dating', 'images', 'literature', 'orig_data_csv']
    enable_merge = False


class ArtifactDetailView(BaseDetailView):

    model = Artifact
    template_name = 'archiv/generic_detail.html'


class ArtifactCreate(BaseCreateView):

    model = Artifact
    form_class = ArtifactForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArtifactCreate, self).dispatch(*args, **kwargs)


class ArtifactUpdate(BaseUpdateView):

    model = Artifact
    form_class = ArtifactForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArtifactUpdate, self).dispatch(*args, **kwargs)


class ArtifactDelete(DeleteView):
    model = Artifact
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:artifact_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArtifactDelete, self).dispatch(*args, **kwargs)


class GeographyListView(GenericListView):

    model = Geography
    filter_class = GeographyListFilter
    formhelper_class = GeographyFilterFormHelper
    table_class = GeographyTable
    init_columns = [
        'id', 'name','identifier'
    ]
    ordering=['id']
    enable_merge = False


class GeographyDetailView(BaseDetailView):

    model = Geography
    #coords=serialize('geojson',Geography.objects.all()) #converts the shapefile loaded to geojson
    template_name = 'archiv/generic_detail.html'


class GeographyCreate(BaseCreateView):

    model = Geography
    form_class = GeographyForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GeographyCreate, self).dispatch(*args, **kwargs)


class GeographyUpdate(BaseUpdateView):

    model = Geography
    form_class = GeographyForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GeographyUpdate, self).dispatch(*args, **kwargs)


class GeographyDelete(DeleteView):
    model = Geography
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:geography_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GeographyDelete, self).dispatch(*args, **kwargs)


class InstitutionListView(GenericListView):

    model = Institution
    filter_class = InstitutionListFilter
    formhelper_class = InstitutionFilterFormHelper
    table_class = InstitutionTable
    init_columns = [
        'id', 'name','identifier'
    ]
    ordering=['name']
    enable_merge = False


class InstitutionDetailView(BaseDetailView):

    model = Institution
    template_name = 'archiv/generic_detail.html'


class InstitutionCreate(BaseCreateView):

    model = Institution
    form_class = InstitutionForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InstitutionCreate, self).dispatch(*args, **kwargs)


class InstitutionUpdate(BaseUpdateView):

    model = Institution
    form_class = InstitutionForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InstitutionUpdate, self).dispatch(*args, **kwargs)


class InstitutionDelete(DeleteView):
    model = Institution
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:institution_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InstitutionDelete, self).dispatch(*args, **kwargs)


class NumberListView(GenericListView):

    model = Number
    filter_class = NumberListFilter
    formhelper_class = NumberFilterFormHelper
    table_class = NumberTable
    init_columns = [
        'id', 'id','number','number_type','oeai_inventory_number'
    ]
    enable_merge = False


class NumberDetailView(BaseDetailView):

    model = Number
    template_name = 'archiv/generic_detail.html'


class NumberCreate(BaseCreateView):

    model = Number
    form_class = NumberForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NumberCreate, self).dispatch(*args, **kwargs)


class NumberUpdate(BaseUpdateView):

    model = Number
    form_class = NumberForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NumberUpdate, self).dispatch(*args, **kwargs)


class NumberDelete(DeleteView):
    model = Number
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:number_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NumberDelete, self).dispatch(*args, **kwargs)


class QuarryListView(GenericListView):

    model = Quarry
    filter_class = QuarryListFilter
    formhelper_class = QuarryFilterFormHelper
    table_class = QuarryTable
    init_columns = [
        'id', 'name','description'
    ]
    enable_merge = False


class QuarryDetailView(BaseDetailView):

    model = Quarry
    template_name = 'archiv/generic_detail.html'


class QuarryCreate(BaseCreateView):

    model = Quarry
    form_class = QuarryForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryCreate, self).dispatch(*args, **kwargs)


class QuarryUpdate(BaseUpdateView):

    model = Quarry
    form_class = QuarryForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryUpdate, self).dispatch(*args, **kwargs)


class QuarryDelete(DeleteView):
    model = Quarry
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:quarry_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryDelete, self).dispatch(*args, **kwargs)


class QuarryGroupListView(GenericListView):

    model = QuarryGroup
    filter_class = QuarryGroupListFilter
    formhelper_class = QuarryGroupFilterFormHelper
    table_class = QuarryGroupTable
    init_columns = [
        'id', 'name',
    ]
    enable_merge = False


class QuarryGroupDetailView(BaseDetailView):

    model = QuarryGroup
    template_name = 'archiv/generic_detail.html'


class QuarryGroupCreate(BaseCreateView):

    model = QuarryGroup
    form_class = QuarryGroupForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryGroupCreate, self).dispatch(*args, **kwargs)


class QuarryGroupUpdate(BaseUpdateView):

    model = QuarryGroup
    form_class = QuarryGroupForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryGroupUpdate, self).dispatch(*args, **kwargs)


class QuarryGroupDelete(DeleteView):
    model = QuarryGroup
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:quarrygroup_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryGroupDelete, self).dispatch(*args, **kwargs)


class SampleListView(GenericListView):

    model = Sample
    filter_class = SampleListFilter
    formhelper_class = SampleFilterFormHelper
    table_class = SampleTable
    init_columns = [
        'id', 'oeai_inventory_number','material',
    ]

    # hier fehlt die 端berpr端fung ob der User eingeloggt ist oder nicht
    exclude_columns = ['quarry_group','grain_size_max','grain_size_min', 'smell','color','color_description',
                    'color_kodak','stdcolor','weight','notes','sampling','image','literature', 'orig_data_csv']
    enable_merge = False


class SampleDetailView(BaseDetailView):

    model = Sample
    template_name = 'archiv/generic_detail.html'


class SampleCreate(BaseCreateView):

    model = Sample
    form_class = SampleForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SampleCreate, self).dispatch(*args, **kwargs)


class SampleUpdate(BaseUpdateView):

    model = Sample
    form_class = SampleForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SampleUpdate, self).dispatch(*args, **kwargs)


class SampleDelete(DeleteView):
    model = Sample
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:sample_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SampleDelete, self).dispatch(*args, **kwargs)


def count_geo(request):
    current_task = count_geography.delay(1)
    return HttpResponse(f"Hey there! TASK-ID: {current_task.id}")


class TaskOveriewView(TemplateView):
    template_name = "archiv/task_overview.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['objects'] = TaskResult.objects.all()
        return context


class ProjectListView(GenericListView):

    model = Project
    filter_class = ProjectListFilter
    formhelper_class = ProjectFilterFormHelper
    table_class = ProjectTable
    init_columns = [
        'id','name'
    ]
    enable_merge = False

class ProjectDetailView(BaseDetailView):
    model = Project
    template_name = 'archiv/generic_detail.html'

class ProjectCreate(BaseCreateView):

    model = Project
    form_class = ProjectForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ProjectCreate, self).dispatch(*args, **kwargs)
    
class ProjectUpdate(BaseUpdateView):

    model = Project
    form_class = ProjectForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ProjectUpdate, self).dispatch(*args, **kwargs)
    
class ProjectDelete(DeleteView):
    model = Project
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:project_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ProjectDelete, self).dispatch(*args, **kwargs)
    
class ImageDetailView(BaseDetailView):
    model = Image
    template_name = 'archiv/generic_detail.html'