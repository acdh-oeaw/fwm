# generated by appcreator
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.urls import reverse_lazy
from django.views.generic.edit import DeleteView
from . filters import (
    AnalyseListFilter,
    ArtifactListFilter,
    GeographyListFilter,
    InstitutionListFilter,
    NumberListFilter,
    QuarryListFilter,
    QuarryGroupListFilter,
    SampleListFilter
)
from . forms import (
    AnalyseForm, AnalyseFilterFormHelper,
    ArtifactForm, ArtifactFilterFormHelper,
    GeographyForm, GeographyFilterFormHelper,
    InstitutionForm, InstitutionFilterFormHelper,
    NumberForm, NumberFilterFormHelper,
    QuarryForm, QuarryFilterFormHelper,
    QuarryGroupForm, QuarryGroupFilterFormHelper,
    SampleForm, SampleFilterFormHelper
)
from . tables import (
    AnalyseTable,
    ArtifactTable,
    GeographyTable,
    InstitutionTable,
    NumberTable,
    QuarryTable,
    QuarryGroupTable,
    SampleTable
)
from . models import (
    Analyse,
    Artifact,
    Geography,
    Institution,
    Number,
    Quarry,
    QuarryGroup,
    Sample
)
from browsing.browsing_utils import (
    GenericListView, BaseCreateView, BaseUpdateView, BaseDetailView
)


class AnalyseListView(GenericListView):

    model = Analyse
    filter_class = AnalyseListFilter
    formhelper_class = AnalyseFilterFormHelper
    table_class = AnalyseTable
    init_columns = [
        'id', 'id',
    ]
    enable_merge = False


class AnalyseDetailView(BaseDetailView):

    model = Analyse
    template_name = 'archiv/generic_detail.html'


class AnalyseCreate(BaseCreateView):

    model = Analyse
    form_class = AnalyseForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AnalyseCreate, self).dispatch(*args, **kwargs)


class AnalyseUpdate(BaseUpdateView):

    model = Analyse
    form_class = AnalyseForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AnalyseUpdate, self).dispatch(*args, **kwargs)


class AnalyseDelete(DeleteView):
    model = Analyse
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:analyse_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AnalyseDelete, self).dispatch(*args, **kwargs)


class ArtifactListView(GenericListView):

    model = Artifact
    filter_class = ArtifactListFilter
    formhelper_class = ArtifactFilterFormHelper
    table_class = ArtifactTable
    init_columns = [
        'id', 'id',
    ]
    enable_merge = False


class ArtifactDetailView(BaseDetailView):

    model = Artifact
    template_name = 'archiv/generic_detail.html'


class ArtifactCreate(BaseCreateView):

    model = Artifact
    form_class = ArtifactForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArtifactCreate, self).dispatch(*args, **kwargs)


class ArtifactUpdate(BaseUpdateView):

    model = Artifact
    form_class = ArtifactForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArtifactUpdate, self).dispatch(*args, **kwargs)


class ArtifactDelete(DeleteView):
    model = Artifact
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:artifact_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArtifactDelete, self).dispatch(*args, **kwargs)


class GeographyListView(GenericListView):

    model = Geography
    filter_class = GeographyListFilter
    formhelper_class = GeographyFilterFormHelper
    table_class = GeographyTable
    init_columns = [
        'id', 'name',
    ]
    enable_merge = False


class GeographyDetailView(BaseDetailView):

    model = Geography
    template_name = 'archiv/generic_detail.html'


class GeographyCreate(BaseCreateView):

    model = Geography
    form_class = GeographyForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GeographyCreate, self).dispatch(*args, **kwargs)


class GeographyUpdate(BaseUpdateView):

    model = Geography
    form_class = GeographyForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GeographyUpdate, self).dispatch(*args, **kwargs)


class GeographyDelete(DeleteView):
    model = Geography
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:geography_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GeographyDelete, self).dispatch(*args, **kwargs)


class InstitutionListView(GenericListView):

    model = Institution
    filter_class = InstitutionListFilter
    formhelper_class = InstitutionFilterFormHelper
    table_class = InstitutionTable
    init_columns = [
        'id', 'name',
    ]
    enable_merge = False


class InstitutionDetailView(BaseDetailView):

    model = Institution
    template_name = 'archiv/generic_detail.html'


class InstitutionCreate(BaseCreateView):

    model = Institution
    form_class = InstitutionForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InstitutionCreate, self).dispatch(*args, **kwargs)


class InstitutionUpdate(BaseUpdateView):

    model = Institution
    form_class = InstitutionForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InstitutionUpdate, self).dispatch(*args, **kwargs)


class InstitutionDelete(DeleteView):
    model = Institution
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:institution_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InstitutionDelete, self).dispatch(*args, **kwargs)


class NumberListView(GenericListView):

    model = Number
    filter_class = NumberListFilter
    formhelper_class = NumberFilterFormHelper
    table_class = NumberTable
    init_columns = [
        'id', 'id',
    ]
    enable_merge = False


class NumberDetailView(BaseDetailView):

    model = Number
    template_name = 'archiv/generic_detail.html'


class NumberCreate(BaseCreateView):

    model = Number
    form_class = NumberForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NumberCreate, self).dispatch(*args, **kwargs)


class NumberUpdate(BaseUpdateView):

    model = Number
    form_class = NumberForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NumberUpdate, self).dispatch(*args, **kwargs)


class NumberDelete(DeleteView):
    model = Number
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:number_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NumberDelete, self).dispatch(*args, **kwargs)


class QuarryListView(GenericListView):

    model = Quarry
    filter_class = QuarryListFilter
    formhelper_class = QuarryFilterFormHelper
    table_class = QuarryTable
    init_columns = [
        'id', 'name',
    ]
    enable_merge = False


class QuarryDetailView(BaseDetailView):

    model = Quarry
    template_name = 'archiv/generic_detail.html'


class QuarryCreate(BaseCreateView):

    model = Quarry
    form_class = QuarryForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryCreate, self).dispatch(*args, **kwargs)


class QuarryUpdate(BaseUpdateView):

    model = Quarry
    form_class = QuarryForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryUpdate, self).dispatch(*args, **kwargs)


class QuarryDelete(DeleteView):
    model = Quarry
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:quarry_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryDelete, self).dispatch(*args, **kwargs)


class QuarryGroupListView(GenericListView):

    model = QuarryGroup
    filter_class = QuarryGroupListFilter
    formhelper_class = QuarryGroupFilterFormHelper
    table_class = QuarryGroupTable
    init_columns = [
        'id', 'name',
    ]
    enable_merge = False


class QuarryGroupDetailView(BaseDetailView):

    model = QuarryGroup
    template_name = 'archiv/generic_detail.html'


class QuarryGroupCreate(BaseCreateView):

    model = QuarryGroup
    form_class = QuarryGroupForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryGroupCreate, self).dispatch(*args, **kwargs)


class QuarryGroupUpdate(BaseUpdateView):

    model = QuarryGroup
    form_class = QuarryGroupForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryGroupUpdate, self).dispatch(*args, **kwargs)


class QuarryGroupDelete(DeleteView):
    model = QuarryGroup
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:quarrygroup_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(QuarryGroupDelete, self).dispatch(*args, **kwargs)


class SampleListView(GenericListView):

    model = Sample
    filter_class = SampleListFilter
    formhelper_class = SampleFilterFormHelper
    table_class = SampleTable
    init_columns = [
        'id', 'oeai_inventory_number',
    ]
    enable_merge = False


class SampleDetailView(BaseDetailView):

    model = Sample
    template_name = 'archiv/generic_detail.html'


class SampleCreate(BaseCreateView):

    model = Sample
    form_class = SampleForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SampleCreate, self).dispatch(*args, **kwargs)


class SampleUpdate(BaseUpdateView):

    model = Sample
    form_class = SampleForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SampleUpdate, self).dispatch(*args, **kwargs)


class SampleDelete(DeleteView):
    model = Sample
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:sample_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SampleDelete, self).dispatch(*args, **kwargs)


# end of automatic created code
