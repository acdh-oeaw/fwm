# generated by appcreator
from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit, Layout, Fieldset
from crispy_forms.bootstrap import Accordion, AccordionGroup
from dal import autocomplete

from vocabs.models import SkosConcept
from . models import (
    Analyse,
    Artifact,
    Geography,
    Institution,
    Number,
    Quarry,
    QuarryGroup,
    Sample
)


class AnalyseFilterFormHelper(FormHelper):
    def __init__(self, *args, **kwargs):
        super(AnalyseFilterFormHelper, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.form_class = 'genericFilterForm'
        self.form_method = 'GET'
        self.helper.form_tag = False
        self.add_input(Submit('Filter', 'Search'))
        self.layout = Layout(
            Fieldset(
                'Basic search options',
                'id',
                css_id="basic_search_fields"
            ),
            Accordion(
                AccordionGroup(
                    'Advanced search',
                    'legacy_pk',
                    'oeai_inventory_number',
                    'institute',
                    'analyse_type',
                    'date',
                    'notes_thinsection',
                    'mgco3',
                    'fe',
                    'mn',
                    'sr',
                    'ion_li',
                    'ion_na',
                    'ion_k',
                    'ion_mg',
                    'ion_ca',
                    'ion_f',
                    'ion_cl',
                    'ion_br',
                    'ion_j',
                    'ion_no3',
                    'ion_so4',
                    'ion_li_na',
                    'ion_k_na',
                    'ion_cl_na',
                    'ion_br_na',
                    'ion_i_na',
                    'ion_so4_na',
                    'ion_f_na',
                    'ion_no3_na',
                    'iso_d18o',
                    'iso_d13c',
                    'icp_mg',
                    'icp_mn',
                    'icp_fe',
                    'icp_sr',
                    'icp_cr',
                    'icp_cr_n2o',
                    'icp_v',
                    'icp_y',
                    'icp_cd',
                    'icp_ba',
                    'icp_la',
                    'icp_ce',
                    'icp_pr',
                    'icp_dy',
                    'icp_ho',
                    'icp_yb',
                    'icp_pb',
                    'icp_u',
                    'epr_spectrometer',
                    'epr_spectral_height',
                    'epr_dolom',
                    'epr_tot6',
                    'epr_spli',
                    'epr_int',
                    'epr_spread',
                    'epr_w',
                    'epr_stdintens',
                    'epr_stdintegr',
                    'epr_stdw',
                    'epr_stdspli',
                    'epr_stdspread',
                    'epr_intens_standardised',
                    'epr_integr_standardised',
                    'epr_spli_standardised',
                    'epr_w_standardised',
                    'epr_spread_standardised',
                    css_id="more"
                ),
                AccordionGroup(
                    'admin',
                    'legacy_id',
                    css_id="admin_search"
                ),
            )
        )


class AnalyseForm(forms.ModelForm):
    analyse_type = forms.ModelChoiceField(
        required=False,
        label="analyse typ",
        queryset=SkosConcept.objects.filter(
            tech_collection__pref_label="analyse__analyse_type"
        )
    )

    class Meta:
        model = Analyse
        fields = "__all__"
        widgets = {
            'oeai_inventory_number': autocomplete.ModelSelect2(
                url='archiv-ac:sample-autocomplete'
            )
        }

    def __init__(self, *args, **kwargs):
        super(AnalyseForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = True
        self.helper.form_class = 'form-horizontal'
        self.helper.label_class = 'col-md-3'
        self.helper.field_class = 'col-md-9'
        self.helper.add_input(Submit('submit', 'save'),)


class ArtifactFilterFormHelper(FormHelper):
    def __init__(self, *args, **kwargs):
        super(ArtifactFilterFormHelper, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.form_class = 'genericFilterForm'
        self.form_method = 'GET'
        self.helper.form_tag = False
        self.add_input(Submit('Filter', 'Search'))
        self.layout = Layout(
            Fieldset(
                'Basic search options',
                'id',
                css_id="basic_search_fields"
            ),
            Accordion(
                AccordionGroup(
                    'Advanced search',
                    'legacy_pk',
                    'artefact_type',
                    'description',
                    'find_spot',
                    'find_spot_extra',
                    'storage_place',
                    'material',
                    'measurement',
                    'preservation',
                    'dating',
                    'images',
                    'literature',
                    css_id="more"
                ),
                AccordionGroup(
                    'admin',
                    'legacy_id',
                    css_id="admin_search"
                ),
            )
        )


class ArtifactForm(forms.ModelForm):
    artefact_type = forms.ModelChoiceField(
        required=False,
        label="artefact type",
        queryset=SkosConcept.objects.filter(
            tech_collection__pref_label="artifact__artefact_type"
        )
    )
    material = forms.ModelChoiceField(
        required=False,
        label="material",
        queryset=SkosConcept.objects.filter(
            tech_collection__pref_label="artifact__material"
        )
    )
    dating = forms.ModelChoiceField(
        required=False,
        label="dating",
        queryset=SkosConcept.objects.filter(
            tech_collection__pref_label="artifact__dating"
        )
    )

    class Meta:
        model = Artifact
        fields = "__all__"

    def __init__(self, *args, **kwargs):
        super(ArtifactForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = True
        self.helper.form_class = 'form-horizontal'
        self.helper.label_class = 'col-md-3'
        self.helper.field_class = 'col-md-9'
        self.helper.add_input(Submit('submit', 'save'),)


class GeographyFilterFormHelper(FormHelper):
    def __init__(self, *args, **kwargs):
        super(GeographyFilterFormHelper, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.form_class = 'genericFilterForm'
        self.form_method = 'GET'
        self.helper.form_tag = False
        self.add_input(Submit('Filter', 'Search'))
        self.layout = Layout(
            Fieldset(
                'Basic search options',
                'id',
                css_id="basic_search_fields"
            ),
            Accordion(
                AccordionGroup(
                    'Advanced search',
                    'name',
                    'identifier',
                    'notes',
                    css_id="more"
                ),
                AccordionGroup(
                    'admin',
                    'legacy_id',
                    css_id="admin_search"
                ),
            )
        )


class GeographyForm(forms.ModelForm):

    class Meta:
        model = Geography
        fields = "__all__"

    def __init__(self, *args, **kwargs):
        super(GeographyForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = True
        self.helper.form_class = 'form-horizontal'
        self.helper.label_class = 'col-md-3'
        self.helper.field_class = 'col-md-9'
        self.helper.add_input(Submit('submit', 'save'),)


class InstitutionFilterFormHelper(FormHelper):
    def __init__(self, *args, **kwargs):
        super(InstitutionFilterFormHelper, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.form_class = 'genericFilterForm'
        self.form_method = 'GET'
        self.helper.form_tag = False
        self.add_input(Submit('Filter', 'Search'))
        self.layout = Layout(
            Fieldset(
                'Basic search options',
                'id',
                css_id="basic_search_fields"
            ),
            Accordion(
                AccordionGroup(
                    'Advanced search',
                    'name',
                    'identifier',
                    css_id="more"
                ),
                AccordionGroup(
                    'admin',
                    'legacy_id',
                    css_id="admin_search"
                ),
            )
        )


class InstitutionForm(forms.ModelForm):

    class Meta:
        model = Institution
        fields = "__all__"

    def __init__(self, *args, **kwargs):
        super(InstitutionForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = True
        self.helper.form_class = 'form-horizontal'
        self.helper.label_class = 'col-md-3'
        self.helper.field_class = 'col-md-9'
        self.helper.add_input(Submit('submit', 'save'),)


class NumberFilterFormHelper(FormHelper):
    def __init__(self, *args, **kwargs):
        super(NumberFilterFormHelper, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.form_class = 'genericFilterForm'
        self.form_method = 'GET'
        self.helper.form_tag = False
        self.add_input(Submit('Filter', 'Search'))
        self.layout = Layout(
            Fieldset(
                'Basic search options',
                'id',
                css_id="basic_search_fields"
            ),
            Accordion(
                AccordionGroup(
                    'Advanced search',
                    'legacy_pk',
                    'oeai_inventory_number',
                    'number',
                    'number_type',
                    'institute',
                    'notes',
                    css_id="more"
                ),
                AccordionGroup(
                    'admin',
                    'legacy_id',
                    css_id="admin_search"
                ),
            )
        )


class NumberForm(forms.ModelForm):
    number_type = forms.ModelChoiceField(
        required=False,
        label="number type",
        queryset=SkosConcept.objects.filter(
            tech_collection__pref_label="number__number_type"
        )
    )

    class Meta:
        model = Number
        fields = "__all__"

    def __init__(self, *args, **kwargs):
        super(NumberForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = True
        self.helper.form_class = 'form-horizontal'
        self.helper.label_class = 'col-md-3'
        self.helper.field_class = 'col-md-9'
        self.helper.add_input(Submit('submit', 'save'),)


class QuarryFilterFormHelper(FormHelper):
    def __init__(self, *args, **kwargs):
        super(QuarryFilterFormHelper, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.form_class = 'genericFilterForm'
        self.form_method = 'GET'
        self.helper.form_tag = False
        self.add_input(Submit('Filter', 'Search'))
        self.layout = Layout(
            Fieldset(
                'Basic search options',
                'id',
                css_id="basic_search_fields"
            ),
            Accordion(
                AccordionGroup(
                    'Advanced search',
                    'name',
                    'geography',
                    'images',
                    'description',
                    'literature',
                    'open_access',
                    css_id="more"
                ),
                AccordionGroup(
                    'admin',
                    'legacy_id',
                    css_id="admin_search"
                ),
            )
        )


class QuarryForm(forms.ModelForm):

    class Meta:
        model = Quarry
        fields = "__all__"
        widgets = {
            'reference': autocomplete.ModelSelect2Multiple(
                url='zotero-ac:zotero-reference'
            )
        }

    def __init__(self, *args, **kwargs):
        super(QuarryForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = True
        self.helper.form_class = 'form-horizontal'
        self.helper.label_class = 'col-md-3'
        self.helper.field_class = 'col-md-9'
        self.helper.add_input(Submit('submit', 'save'),)


class QuarryGroupFilterFormHelper(FormHelper):
    def __init__(self, *args, **kwargs):
        super(QuarryGroupFilterFormHelper, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.form_class = 'genericFilterForm'
        self.form_method = 'GET'
        self.helper.form_tag = False
        self.add_input(Submit('Filter', 'Search'))
        self.layout = Layout(
            Fieldset(
                'Basic search options',
                'id',
                css_id="basic_search_fields"
            ),
            Accordion(
                AccordionGroup(
                    'Advanced search',
                    'name',
                    'description',
                    css_id="more"
                ),
                AccordionGroup(
                    'admin',
                    'legacy_id',
                    css_id="admin_search"
                ),
            )
        )


class QuarryGroupForm(forms.ModelForm):

    class Meta:
        model = QuarryGroup
        fields = "__all__"

    def __init__(self, *args, **kwargs):
        super(QuarryGroupForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = True
        self.helper.form_class = 'form-horizontal'
        self.helper.label_class = 'col-md-3'
        self.helper.field_class = 'col-md-9'
        self.helper.add_input(Submit('submit', 'save'),)


class SampleFilterFormHelper(FormHelper):
    def __init__(self, *args, **kwargs):
        super(SampleFilterFormHelper, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.form_class = 'genericFilterForm'
        self.form_method = 'GET'
        self.helper.form_tag = False
        self.add_input(Submit('Filter', 'Search'))
        self.layout = Layout(
            Fieldset(
                'Basic search options',
                'id',
                css_id="basic_search_fields"
            ),
            Accordion(
                AccordionGroup(
                    'Advanced search',
                    'oeai_inventory_number',
                    'smell',
                    'grain_size_min',
                    'grain_size_max',
                    'material',
                    'color',
                    'color_description',
                    'color_kodak',
                    'stdcolor',
                    'weight',
                    'artefakt_id',
                    'quarry',
                    'quarry_group',
                    'notes',
                    'sampling',
                    'literature',
                    'image',
                    'open_access',
                    css_id="more"
                ),
                AccordionGroup(
                    'admin',
                    'legacy_id',
                    css_id="admin_search"
                ),
            )
        )


class SampleForm(forms.ModelForm):
    smell = forms.ModelChoiceField(
        required=False,
        label="smell",
        queryset=SkosConcept.objects.filter(
            tech_collection__pref_label="sample__smell"
        )
    )
    grain_size_min = forms.ModelChoiceField(
        required=False,
        label="grain size min",
        queryset=SkosConcept.objects.filter(
            tech_collection__pref_label="sample__grain_size_min"
        )
    )
    grain_size_max = forms.ModelChoiceField(
        required=False,
        label="grain size max",
        queryset=SkosConcept.objects.filter(
            tech_collection__pref_label="sample__grain_size_max"
        )
    )
    material = forms.ModelChoiceField(
        required=False,
        label="material",
        queryset=SkosConcept.objects.filter(
            tech_collection__pref_label="sample__material"
        )
    )
    color = forms.ModelChoiceField(
        required=False,
        label="color",
        queryset=SkosConcept.objects.filter(
            tech_collection__pref_label="sample__color"
        )
    )

    class Meta:
        model = Sample
        fields = "__all__"

    def __init__(self, *args, **kwargs):
        super(SampleForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = True
        self.helper.form_class = 'form-horizontal'
        self.helper.label_class = 'col-md-3'
        self.helper.field_class = 'col-md-9'
        self.helper.add_input(Submit('submit', 'save'),)
