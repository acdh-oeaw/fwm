# generated by appcreator

from django.db import models
from django.urls import reverse

from browsing.browsing_utils import model_to_dict
from vocabs.models import SkosConcept


def set_extra(self, **kwargs):
    self.extra = kwargs
    return self


models.Field.set_extra = set_extra


class Analyse(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
    )
    oeai_inventory_number = models.ForeignKey(
        "Sample",
        related_name='rvn_analyse_oeai_inventory_number_sample',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="OeAI inventory number",
        help_text="OeAI inventory number; unique",
    ).set_extra(
        is_public=True,
    )
    institute = models.ForeignKey(
        "Institution",
        related_name='rvn_analyse_institute_institution',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="institute",
        help_text="institute where the analysis took place",
    ).set_extra(
        is_public=True,
    )
    analyse_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_analyse_analyse_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="analyse typ",
        help_text="analyse typ",
    ).set_extra(
        is_public=True,
    )
    date = models.DateField(
        blank=True, null=True,
        verbose_name="date",
        help_text="analyse date",
    ).set_extra(
        is_public=True,
    )
    notes_thinsection = models.TextField(
        blank=True, null=True,
        verbose_name="thinsection notes",
        help_text="helptext for notes_thinsection",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
    ).set_extra(
        is_public=True
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Analyse"

    def __str__(self):
        if self.id:
            return "{}".format(self.id)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:analyse_browse')

    @classmethod
    def get_source_table(self):
        return None

    @classmethod
    def get_natural_primary_key(self):
        return "id"

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:analyse_create')

    def get_absolute_url(self):
        return reverse('archiv:analyse_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:analyse_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:analyse_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:analyse_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:analyse_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Artifact(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
    )
    artefact_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_artifact_artefact_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="artefact type",
        help_text="type of the artefact; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    description = models.TextField(
        blank=True, null=True,
        verbose_name="description",
        help_text="description of the artefact",
    ).set_extra(
        is_public=True,
    )
    find_spot = models.ForeignKey(
        "Geography",
        related_name='rvn_artifact_find_spot_geography',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="find spot",
        help_text="find spot of the artefact ",
    ).set_extra(
        is_public=True,
    )
    find_spot_extra = models.TextField(
        blank=True, null=True,
        verbose_name="find spot notes",
        help_text="additional notes of the find spot",
    ).set_extra(
        is_public=True,
    )
    storage_place = models.ForeignKey(
        "Institution",
        related_name='rvn_artifact_storage_place_institution',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="storage place",
        help_text="storage institution",
    ).set_extra(
        is_public=True,
    )
    material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_artifact_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="material",
        help_text="the artefacts material; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    measurement = models.TextField(
        blank=True, null=True,
        verbose_name="measurement",
        help_text="measurement information of the artefact",
    ).set_extra(
        is_public=True,
    )
    preservation = models.TextField(
        blank=True, null=True,
        verbose_name="preservation",
        help_text="preservation information",
    ).set_extra(
        is_public=True,
    )
    dating = models.ForeignKey(
        SkosConcept,
        related_name='rvn_artifact_dating_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="dating",
        help_text="dating information; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    images = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="images",
        help_text="images of the artefact",
    ).set_extra(
        is_public=True,
    )
    literature = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="literature",
        help_text="literature",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
    ).set_extra(
        is_public=True
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Artifact"

    def __str__(self):
        if self.id:
            return "{}".format(self.id)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:artifact_browse')

    @classmethod
    def get_source_table(self):
        return None

    @classmethod
    def get_natural_primary_key(self):
        return "id"

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:artifact_create')

    def get_absolute_url(self):
        return reverse('archiv:artifact_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:artifact_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:artifact_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:artifact_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:artifact_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Geography(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
    )
    contintent = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geography_contintent_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="continent",
        help_text="continent of the geographic location; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    land = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geography_land_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="land",
        help_text="land of the geographic location; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    province = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geography_province_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="province",
        help_text="province of the geographic location; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    location = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geography_location_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="location",
        help_text="location of the geographic location; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    name = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geography_name_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="name",
        help_text="name of the geographic location; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    identifier = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="identifier",
        help_text="identifier of the geographic location; gazetteers",
    ).set_extra(
        is_public=True,
    )
    coordinates = models.TextField(
        blank=True, null=True,
        verbose_name="coordinates",
        help_text="coordinates of the geographic location",
    ).set_extra(
        is_public=True,
    )
    notes = models.TextField(
        blank=True, null=True,
        verbose_name="notes",
        help_text="additional notes",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
    ).set_extra(
        is_public=True
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Geography"

    def __str__(self):
        if self.id:
            return "{}".format(self.id)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:geography_browse')

    @classmethod
    def get_source_table(self):
        return None

    @classmethod
    def get_natural_primary_key(self):
        return "id"

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:geography_create')

    def get_absolute_url(self):
        return reverse('archiv:geography_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:geography_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:geography_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:geography_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:geography_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Institution(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
    )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="name",
        help_text="name of the institution",
    ).set_extra(
        is_public=True,
    )
    identifier = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="identifier",
        help_text="identifier of the institution; gazetteers",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
    ).set_extra(
        is_public=True
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Insititution"

    def __str__(self):
        if self.id:
            return "{}".format(self.id)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:institution_browse')

    @classmethod
    def get_source_table(self):
        return None

    @classmethod
    def get_natural_primary_key(self):
        return "id"

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:institution_create')

    def get_absolute_url(self):
        return reverse('archiv:institution_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:institution_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:institution_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:institution_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:institution_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Number(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
    )
    oeai_inventory_number = models.ForeignKey(
        "Sample",
        related_name='rvn_number_oeai_inventory_number_sample',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="OeAI inventory number",
        help_text="OeAI inventory number",
    ).set_extra(
        is_public=True,
    )
    number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="number",
        help_text="other number",
    ).set_extra(
        is_public=True,
    )
    number_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_number_number_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="number type",
        help_text="type of the number; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    institute = models.ForeignKey(
        "Institution",
        related_name='rvn_number_institute_institution',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="institute",
        help_text="institute that assigned then number",
    ).set_extra(
        is_public=True,
    )
    notes = models.TextField(
        blank=True, null=True,
        verbose_name="notes",
        help_text="additional notes",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
    ).set_extra(
        is_public=True
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Number"

    def __str__(self):
        if self.id:
            return "{}".format(self.id)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:number_browse')

    @classmethod
    def get_source_table(self):
        return None

    @classmethod
    def get_natural_primary_key(self):
        return "id"

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:number_create')

    def get_absolute_url(self):
        return reverse('archiv:number_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:number_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:number_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:number_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:number_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Quarry(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
    )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="name",
        help_text="name of the quarry",
    ).set_extra(
        is_public=True,
    )
    geography = models.ForeignKey(
        "Geography",
        related_name='rvn_quarry_geography_geography',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="geographical location",
        help_text="geographical location of the quarry",
    ).set_extra(
        is_public=True,
    )
    images = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="images",
        help_text="images",
    ).set_extra(
        is_public=True,
    )
    description = models.TextField(
        blank=True, null=True,
        verbose_name="description",
        help_text="description of the quarry",
    ).set_extra(
        is_public=True,
    )
    literature = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="literature",
        help_text="literature",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
    ).set_extra(
        is_public=True
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Quarry"

    def __str__(self):
        if self.id:
            return "{}".format(self.id)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:quarry_browse')

    @classmethod
    def get_source_table(self):
        return None

    @classmethod
    def get_natural_primary_key(self):
        return "id"

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:quarry_create')

    def get_absolute_url(self):
        return reverse('archiv:quarry_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:quarry_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:quarry_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:quarry_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:quarry_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class QuarryGroup(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
    )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="name",
        help_text="name of the quarry group",
    ).set_extra(
        is_public=True,
    )
    description = models.TextField(
        blank=True, null=True,
        verbose_name="description",
        help_text="description of the quarry group",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
    ).set_extra(
        is_public=True
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "QuarryGroup"

    def __str__(self):
        if self.id:
            return "{}".format(self.id)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:quarrygroup_browse')

    @classmethod
    def get_source_table(self):
        return None

    @classmethod
    def get_natural_primary_key(self):
        return "id"

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:quarrygroup_create')

    def get_absolute_url(self):
        return reverse('archiv:quarrygroup_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:quarrygroup_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:quarrygroup_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:quarrygroup_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:quarrygroup_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Sample(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
    )
    oeai_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="OeAI inventory number",
        help_text="OeAI inventory number; unique",
    ).set_extra(
        is_public=True,
    )
    smell = models.ForeignKey(
        SkosConcept,
        related_name='rvn_sample_smell_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="smell",
        help_text="smell of the sample; entries from 0 to 4",
    ).set_extra(
        is_public=True,
    )
    grain_size_min = models.ForeignKey(
        SkosConcept,
        related_name='rvn_sample_grain_size_min_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="grain size min",
        help_text="minimum grain size; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    grain_size_max = models.ForeignKey(
        SkosConcept,
        related_name='rvn_sample_grain_size_max_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="grain size max",
        help_text="maximum grain size; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_sample_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="material",
        help_text="material of the sample; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    color = models.ForeignKey(
        SkosConcept,
        related_name='rvn_sample_color_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="color",
        help_text="color of the sample; controlled vocabulary",
    ).set_extra(
        is_public=True,
    )
    color_description = models.TextField(
        blank=True, null=True,
        verbose_name="color description",
        help_text="precise description of the color",
    ).set_extra(
        is_public=True,
    )
    color_kodak = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="color kodak",
        help_text="more detailed information about the kodak color",
    ).set_extra(
        is_public=True,
    )
    stdcolor = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="color stdcolor",
        help_text="more detailed information about the kodak color",
    ).set_extra(
        is_public=True,
    )
    artefakt_id = models.ForeignKey(
        "Artifact",
        related_name='rvn_sample_artefakt_id_artifact',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="artefact",
        help_text="sampled artefact",
    ).set_extra(
        is_public=True,
    )
    quarry = models.ForeignKey(
        "Quarry",
        related_name='rvn_sample_quarry_quarry',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="quarry",
        help_text="sampled quarry",
    ).set_extra(
        is_public=True,
    )
    quarry_group = models.ForeignKey(
        "QuarryGroup",
        related_name='rvn_sample_quarry_group_quarrygroup',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="quarry group",
        help_text="quarry group",
    ).set_extra(
        is_public=True,
    )
    notes = models.TextField(
        blank=True, null=True,
        verbose_name="notes",
        help_text="notes",
    ).set_extra(
        is_public=True,
    )
    sampling = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="sampling",
        help_text="information about the sampling",
    ).set_extra(
        is_public=True,
    )
    literature = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="literature",
        help_text="literature",
    ).set_extra(
        is_public=True,
    )
    image = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="images",
        help_text="images",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
    ).set_extra(
        is_public=True
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Sample"

    def __str__(self):
        if self.oeai_inventory_number:
            return "{}".format(self.oeai_inventory_number)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:sample_browse')

    @classmethod
    def get_source_table(self):
        return None

    @classmethod
    def get_natural_primary_key(self):
        return "oeai_inventory_number"

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:sample_create')

    def get_absolute_url(self):
        return reverse('archiv:sample_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:sample_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:sample_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:sample_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:sample_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


