# generated by appcreator
import pandas as pd

from django.db import models
from django.urls import reverse
from django.contrib.gis.db.models import MultiPolygonField, PointField

from tqdm import tqdm
from next_prev import next_in_order, prev_in_order

from browsing.browsing_utils import model_to_dict
from vocabs.models import SkosConcept
from zotero_ac.models import ZoteroReference

from archiv.storage import OverwriteStorage

OUT_DIR = "./archiv/data/"


def set_extra(self, **kwargs):
    self.extra = kwargs
    return self


models.Field.set_extra = set_extra


class DataSheet(models.Model):
    upload = models.FileField(
        blank=True, null=True, upload_to="archiv/data", storage=OverwriteStorage()
    )

    def __str__(self):
        return f"{self.upload.name}"

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        cur_file = self.upload.path
        excel = pd.ExcelFile(cur_file)
        for x in tqdm(excel.sheet_names, total=len(excel.sheet_names)):
            df = pd.read_excel(cur_file, sheet_name=x)
            df.to_csv(f"{OUT_DIR}/{x}.csv", index=False)


class Analyse(models.Model):
    """nan"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    legacy_pk = models.IntegerField(
        blank=True,
        null=True,
        verbose_name="alt id",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="id",
    )
    oeai_inventory_number = models.ForeignKey(
        "Sample",
        related_name="rvn_analyse_oeai_inventory_number_sample",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="OeAI inventory number",
        help_text="OeAI inventory number; unique",
    ).set_extra(
        is_public=True,
        data_lookup="oeai_inventarnummer",
    )
    institute = models.ForeignKey(
        "Institution",
        related_name="rvn_analyse_institute_institution",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="institute",
        help_text="institute where the analysis took place",
    ).set_extra(
        is_public=True,
        data_lookup="labor",
    )
    analyse_type = models.ForeignKey(
        SkosConcept,
        related_name="rvn_analyse_analyse_type_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="analyse typ",
        help_text="analyse typ",
    ).set_extra(
        is_public=True,
        data_lookup="analyse_type",
    )
    date = models.DateField(
        blank=True,
        null=True,
        verbose_name="date",
        help_text="analyse date",
    ).set_extra(
        is_public=True,
        data_lookup="date",
    )
    notes_thinsection = models.TextField(
        blank=True,
        null=True,
        verbose_name="thinsection notes",
        help_text="helptext for notes_thinsection",
    ).set_extra(
        is_public=True,
        data_lookup="notes_thinsection",
    )
    mgco3 = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="MgCO3",
        help_text="helptext for mgco3",
    ).set_extra(
        is_public=True,
        data_lookup="MgCO3",
    )
    fe = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Fe",
        help_text="helptext for fe",
    ).set_extra(
        is_public=True,
        data_lookup="Fe [ppm]",
    )
    mn = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Mn",
        help_text="helptext for mn",
    ).set_extra(
        is_public=True,
        data_lookup="Mn [ppm]",
    )
    sr = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Sr",
        help_text="helptext for sr",
    ).set_extra(
        is_public=True,
        data_lookup="Sr [ppm]",
    )
    ion_li = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Li",
        help_text="helptext for ion_li",
    ).set_extra(
        is_public=True,
        data_lookup="Li [ppb]",
    )
    ion_na = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Na",
        help_text="helptext for ion_na",
    ).set_extra(
        is_public=True,
        data_lookup="Na [ppb]",
    )
    ion_k = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="K",
        help_text="helptext for ion_k",
    ).set_extra(
        is_public=True,
        data_lookup="K [ppb]",
    )
    ion_mg = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="MgCO3",
        help_text="helptext for ion_mg",
    ).set_extra(
        is_public=True,
        data_lookup="Mg [ppb]",
    )
    ion_ca = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Ca",
        help_text="helptext for ion_ca",
    ).set_extra(
        is_public=True,
        data_lookup="Ca [ppb]",
    )
    ion_f = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Fe",
        help_text="helptext for ion_f",
    ).set_extra(
        is_public=True,
        data_lookup="F [ppb]",
    )
    ion_cl = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Cl",
        help_text="helptext for ion_cl",
    ).set_extra(
        is_public=True,
        data_lookup="Cl [ppb]",
    )
    ion_br = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Br",
        help_text="helptext for ion_br",
    ).set_extra(
        is_public=True,
        data_lookup="Br [ppb]",
    )
    ion_j = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="J",
        help_text="helptext for ion_j",
    ).set_extra(
        is_public=True,
        data_lookup="J [ppb]",
    )
    ion_no3 = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="NO3",
        help_text="helptext for ion_no3",
    ).set_extra(
        is_public=True,
        data_lookup="NO3 [ppb]",
    )
    ion_so4 = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="SO4",
        help_text="helptext for ion_so4",
    ).set_extra(
        is_public=True,
        data_lookup="SO4 [ppb]",
    )
    ion_li_na = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Li/Na",
        help_text="helptext for ion_li_na",
    ).set_extra(
        is_public=True,
        data_lookup="Li/Na",
    )
    ion_k_na = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="K/Na",
        help_text="helptext for ion_k_na",
    ).set_extra(
        is_public=True,
        data_lookup="K/Na",
    )
    ion_cl_na = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Cl/Na",
        help_text="helptext for ion_cl_na",
    ).set_extra(
        is_public=True,
        data_lookup="Cl/Na",
    )
    ion_br_na = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Br/Na",
        help_text="helptext for ion_br_na",
    ).set_extra(
        is_public=True,
        data_lookup="Br/Na",
    )
    ion_i_na = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="I/Na",
        help_text="helptext for ion_i_na",
    ).set_extra(
        is_public=True,
        data_lookup="I/Na",
    )
    ion_so4_na = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="SO4/Na",
        help_text="helptext for ion_so4_na",
    ).set_extra(
        is_public=True,
        data_lookup="SO4/Na",
    )
    ion_f_na = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="F/Na",
        help_text="helptext for ion_f_na",
    ).set_extra(
        is_public=True,
        data_lookup="F/Na",
    )
    ion_no3_na = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="NO3/Na",
        help_text="helptext for ion_no3_na",
    ).set_extra(
        is_public=True,
        data_lookup="NO3/Na",
    )
    iso_d18o = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="d18O (PDB)",
        help_text="helptext for iso_d18o",
    ).set_extra(
        is_public=True,
        data_lookup="D18O (PDB)",
    )
    iso_d13c = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="D13c (PDB)",
        help_text="helptext for iso_d13c",
    ).set_extra(
        is_public=True,
        data_lookup="D13c (PDB)",
    )
    icp_mg = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Mg",
        help_text="helptext for icp_mg",
    ).set_extra(
        is_public=True,
        data_lookup="Mg [%]",
    )
    icp_mn = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Mn",
        help_text="helptext for icp_mn",
    ).set_extra(
        is_public=True,
        data_lookup="Mn [ppm] (ICP)",
    )
    icp_fe = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Fe",
        help_text="helptext for icp_fe",
    ).set_extra(
        is_public=True,
        data_lookup="Fe [ppm]",
    )
    icp_sr = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Sr",
        help_text="helptext for icp_sr",
    ).set_extra(
        is_public=True,
        data_lookup="Sr [ppm] (ICP)",
    )
    icp_cr = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Cr",
        help_text="helptext for icp_cr",
    ).set_extra(
        is_public=True,
        data_lookup="Cr [No Gas] [ppm]",
    )
    icp_cr_n2o = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Cr (N2O)",
        help_text="helptext for icp_cr_n2o",
    ).set_extra(
        is_public=True,
        data_lookup="Cr [ N2O ] [ppm]",
    )
    icp_v = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="V",
        help_text="helptext for icp_v",
    ).set_extra(
        is_public=True,
        data_lookup="V [ppm]",
    )
    icp_y = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Y",
        help_text="helptext for icp_y",
    ).set_extra(
        is_public=True,
        data_lookup="Y [ppm]",
    )
    icp_cd = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Cd",
        help_text="helptext for icp_cd",
    ).set_extra(
        is_public=True,
        data_lookup="Cd [ppm]",
    )
    icp_ba = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Ba",
        help_text="helptext for icp_ba",
    ).set_extra(
        is_public=True,
        data_lookup="Ba [ppm]",
    )
    icp_la = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="La",
        help_text="helptext for icp_la",
    ).set_extra(
        is_public=True,
        data_lookup="La [ppm]",
    )
    icp_ce = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Ce",
        help_text="helptext for icp_ce",
    ).set_extra(
        is_public=True,
        data_lookup="Ce [ppm]",
    )
    icp_pr = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Pr",
        help_text="helptext for icp_pr",
    ).set_extra(
        is_public=True,
        data_lookup="Pr [ppm]",
    )
    icp_dy = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Dy",
        help_text="helptext for icp_dy",
    ).set_extra(
        is_public=True,
        data_lookup="Dy [ppm]",
    )
    icp_ho = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Ho",
        help_text="helptext for icp_ho",
    ).set_extra(
        is_public=True,
        data_lookup="Ho [ppm]",
    )
    icp_yb = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Yb",
        help_text="helptext for icp_yb",
    ).set_extra(
        is_public=True,
        data_lookup="Yb [ppm]",
    )
    icp_pb = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Pb",
        help_text="helptext for icp_pb",
    ).set_extra(
        is_public=True,
        data_lookup="Pb [ppm]",
    )
    icp_u = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="U",
        help_text="helptext for icp_u",
    ).set_extra(
        is_public=True,
        data_lookup="U [ppm]",
    )
    epr_spectrometer = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Gain of the Spectrometer",
        help_text="helptext for epr_spectrometer",
    ).set_extra(
        is_public=True,
        data_lookup="Gain of the Spectrometer",
    )
    epr_spectral_height = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Spectral height",
        help_text="helptext for epr_spectral_height",
    ).set_extra(
        is_public=True,
        data_lookup="Spectral height",
    )
    epr_dolom = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="DOLOM",
        help_text="Dolomitic Mn2+ DOLOM",
    ).set_extra(
        is_public=True,
        data_lookup="DOLOM",
    )
    epr_tot6 = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="TOT6",
        help_text="Extension of doublet D6",
    ).set_extra(
        is_public=True,
        data_lookup="TOT6",
    )
    epr_spli = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="SPLI",
        help_text="Line separation of doublet D6",
    ).set_extra(
        is_public=True,
        data_lookup="SPLI",
    )
    epr_int = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="INT",
        help_text="Integral of the spectrum",
    ).set_extra(
        is_public=True,
        data_lookup="INT",
    )
    epr_spread = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="SPREAD",
        help_text="Extension of the spectrum",
    ).set_extra(
        is_public=True,
        data_lookup="SPREAD",
    )
    epr_w = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="W",
        help_text="Average spectral width",
    ).set_extra(
        is_public=True,
        data_lookup="W",
    )
    epr_stdintens = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="STDINTENS",
        help_text="Value of the standard variable",
    ).set_extra(
        is_public=True,
        data_lookup="STDINTENS",
    )
    epr_stdintegr = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="STDINTEGR",
        help_text="Value of the standard variable",
    ).set_extra(
        is_public=True,
        data_lookup="STDINTEGR",
    )
    epr_stdw = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="STDW",
        help_text="Value of the standard variable",
    ).set_extra(
        is_public=True,
        data_lookup="STDW",
    )
    epr_stdspli = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="STDSPLI",
        help_text="Value of the standard variable",
    ).set_extra(
        is_public=True,
        data_lookup="STDSPLI",
    )
    epr_stdspread = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="STDSPREAD",
        help_text="Value of the standard variable",
    ).set_extra(
        is_public=True,
        data_lookup="STDSPREAD",
    )
    epr_intens_standardised = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="INTENS Standardised",
        help_text="Standardised value of variables",
    ).set_extra(
        is_public=True,
        data_lookup="INTENS_Standardised",
    )
    epr_integr_standardised = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="INTEGR Standardised",
        help_text="Standardised value of variables",
    ).set_extra(
        is_public=True,
        data_lookup="INTEGR_Standardised",
    )
    epr_spli_standardised = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="SPLI Standardised",
        help_text="Standardised value of variables",
    ).set_extra(
        is_public=True,
        data_lookup="SPLI_Standardised",
    )
    epr_w_standardised = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="W Standardised",
        help_text="Standardised value of variables",
    ).set_extra(
        is_public=True,
        data_lookup="W_Standardised",
    )
    epr_spread_standardised = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="SPREAD Standardised",
        help_text="Standardised value of variables",
    ).set_extra(
        is_public=True,
        data_lookup="SPREAD_Standardised",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:
        ordering = [
            "id",
        ]
        verbose_name = "Analyse"

    def __str__(self):
        if self.id:
            return "{}".format(self.id)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:analyse_browse")

    @classmethod
    def get_source_table(self):
        return "./archiv/data/Analysis.csv"

    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:analyse_create")

    def get_absolute_url(self):
        return reverse("archiv:analyse_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:analyse_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:analyse_edit", kwargs={"pk": self.id})

    def get_next(self):
        next = next_in_order(self)
        if next:
            return next.get_absolute_url()
        return False

    def get_prev(self):
        prev = prev_in_order(self)
        if prev:
            return prev.get_absolute_url()
        return False


class Artifact(models.Model):
    """nan"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    legacy_pk = models.IntegerField(
        blank=True,
        null=True,
        verbose_name="alt id",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="id",
    )
    artefact_type = models.ForeignKey(
        SkosConcept,
        related_name="rvn_artifact_artefact_type_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="artefact type",
        help_text="type of the artefact; controlled vocabulary",
    ).set_extra(
        is_public=True,
        data_lookup="artefact_type",
    )
    description = models.TextField(
        blank=True,
        null=True,
        verbose_name="description",
        help_text="description of the artefact",
    ).set_extra(
        is_public=True,
        data_lookup="description",
    )
    find_spot = models.ForeignKey(
        "Geography",
        related_name="rvn_artifact_find_spot_geography",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="find spot",
        help_text="find spot of the artefact ",
    ).set_extra(
        is_public=True,
        data_lookup="find_spot",
    )
    find_spot_extra = models.TextField(
        blank=True,
        null=True,
        verbose_name="find spot notes",
        help_text="additional notes of the find spot",
    ).set_extra(
        is_public=True,
        data_lookup="find_spot_extra",
    )
    storage_place = models.ForeignKey(
        "Institution",
        related_name="rvn_artifact_storage_place_institution",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="storage place",
        help_text="storage institution",
    ).set_extra(
        is_public=True,
        data_lookup="storage_place",
    )
    material = models.ForeignKey(
        SkosConcept,
        related_name="rvn_artifact_material_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="material",
        help_text="the artefacts material; controlled vocabulary",
    ).set_extra(
        is_public=True,
        data_lookup="material",
    )
    measurement = models.TextField(
        blank=True,
        null=True,
        verbose_name="measurement",
        help_text="measurement information of the artefact",
    ).set_extra(
        is_public=True,
        data_lookup="measurement",
    )
    preservation = models.TextField(
        blank=True,
        null=True,
        verbose_name="preservation",
        help_text="preservation information",
    ).set_extra(
        is_public=True,
        data_lookup="preservation",
    )
    dating = models.ForeignKey(
        SkosConcept,
        related_name="rvn_artifact_dating_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="dating",
        help_text="dating information; controlled vocabulary",
    ).set_extra(
        is_public=True,
        data_lookup="dating",
    )
    images = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="images",
        help_text="images of the artefact",
    ).set_extra(
        is_public=True,
        data_lookup="images",
    )
    literature = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="literature",
        help_text="literature",
    ).set_extra(
        is_public=True,
        data_lookup="literature",
    )
    reference = models.ManyToManyField(
        ZoteroReference,
        blank=True,
        verbose_name="Literatur",
        help_text="please provide some",
        related_name="reference_for_artefact",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:
        ordering = [
            "id",
        ]
        verbose_name = "Artifact"

    def __str__(self):
        if self.id:
            return "{}".format(self.id)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:artifact_browse")

    @classmethod
    def get_source_table(self):
        return "./archiv/data/Artifact.csv"

    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:artifact_create")

    def get_absolute_url(self):
        return reverse("archiv:artifact_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:artifact_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:artifact_edit", kwargs={"pk": self.id})

    def get_next(self):
        next = next_in_order(self)
        if next:
            return next.get_absolute_url()
        return False

    def get_prev(self):
        prev = prev_in_order(self)
        if prev:
            return prev.get_absolute_url()
        return False


class Geography(models.Model):
    """nan"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    name = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="name",
        help_text="name of the geographic location",
    ).set_extra(
        is_public=True,
        data_lookup="name",
    )
    identifier = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="identifier",
        help_text="identifier of the geographic location; gazetteers",
    ).set_extra(
        is_public=True,
        data_lookup="identifier",
    )
    coordinates = PointField(
        blank=True,
        null=True,
        verbose_name="coordinates",
        help_text="coordinates of the geographic location (X, Y)",
    ).set_extra(
        is_public=True,
        data_lookup="coordinates",
    )
    polygon = MultiPolygonField(
        blank=True,
        null=True,
        verbose_name="polygon",
        help_text="MultiPolygonField to depict the area of the location",
    ).set_extra(
        is_public=True,
    )
    notes = models.TextField(
        blank=True,
        null=True,
        verbose_name="notes",
        help_text="additional notes",
    ).set_extra(
        is_public=True,
        data_lookup="notes",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:
        ordering = [
            "name",
        ]
        verbose_name = "Geography"

    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:geography_browse")

    @classmethod
    def get_source_table(self):
        return "./archiv/data/Geography.csv"

    @classmethod
    def get_natural_primary_key(self):
        return "name"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:geography_create")

    def get_absolute_url(self):
        return reverse("archiv:geography_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:geography_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:geography_edit", kwargs={"pk": self.id})

    def get_next(self):
        next = next_in_order(self)
        if next:
            return next.get_absolute_url()
        return False

    def get_prev(self):
        prev = prev_in_order(self)
        if prev:
            return prev.get_absolute_url()
        return False


class Institution(models.Model):
    """nan"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    name = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="name",
        help_text="name of the institution",
    ).set_extra(
        is_public=True,
        data_lookup="name",
    )
    identifier = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="identifier",
        help_text="identifier of the institution; gazetteers",
    ).set_extra(
        is_public=True,
        data_lookup="identifier",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:
        ordering = [
            "name",
        ]
        verbose_name = "Institution"

    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:institution_browse")

    @classmethod
    def get_source_table(self):
        return "./archiv/data/Institution.csv"

    @classmethod
    def get_natural_primary_key(self):
        return "name"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:institution_create")

    def get_absolute_url(self):
        return reverse("archiv:institution_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:institution_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:institution_edit", kwargs={"pk": self.id})

    def get_next(self):
        next = next_in_order(self)
        if next:
            return next.get_absolute_url()
        return False

    def get_prev(self):
        prev = prev_in_order(self)
        if prev:
            return prev.get_absolute_url()
        return False


class Number(models.Model):
    """nan"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    legacy_pk = models.IntegerField(
        blank=True,
        null=True,
        verbose_name="alt id",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="id",
    )
    oeai_inventory_number = models.ForeignKey(
        "Sample",
        related_name="rvn_number_oeai_inventory_number_sample",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="OeAI inventory number",
        help_text="OeAI inventory number",
    ).set_extra(
        is_public=True,
        data_lookup="oeai_inventory_number",
    )
    number = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="number",
        help_text="other number",
    ).set_extra(
        is_public=True,
        data_lookup="number",
    )
    number_type = models.ForeignKey(
        SkosConcept,
        related_name="rvn_number_number_type_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="number type",
        help_text="type of the number; controlled vocabulary",
    ).set_extra(
        is_public=True,
        data_lookup="number_type",
    )
    institute = models.ForeignKey(
        "Institution",
        related_name="rvn_number_institute_institution",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="institute",
        help_text="institute that assigned then number",
    ).set_extra(
        is_public=True,
        data_lookup="institute",
    )
    notes = models.TextField(
        blank=True,
        null=True,
        verbose_name="notes",
        help_text="additional notes",
    ).set_extra(
        is_public=True,
        data_lookup="notes",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:
        ordering = [
            "id",
        ]
        verbose_name = "Number"

    def __str__(self):
        if self.id:
            return "{}".format(self.id)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:number_browse")

    @classmethod
    def get_source_table(self):
        return "./archiv/data/Number.csv"

    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:number_create")

    def get_absolute_url(self):
        return reverse("archiv:number_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:number_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:number_edit", kwargs={"pk": self.id})

    def get_next(self):
        next = next_in_order(self)
        if next:
            return next.get_absolute_url()
        return False

    def get_prev(self):
        prev = prev_in_order(self)
        if prev:
            return prev.get_absolute_url()
        return False


class Quarry(models.Model):
    """nan"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    name = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="name",
        help_text="name of the quarry",
    ).set_extra(
        is_public=True,
        data_lookup="name",
    )
    geography = models.ForeignKey(
        "Geography",
        related_name="rvn_quarry_geography_geography",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="geographical location",
        help_text="geographical location of the quarry",
    ).set_extra(
        is_public=True,
        data_lookup="geography",
    )
    images = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="images",
        help_text="images",
    ).set_extra(
        is_public=True,
        data_lookup="images",
    )
    description = models.TextField(
        blank=True,
        null=True,
        verbose_name="description",
        help_text="description of the quarry",
    ).set_extra(
        is_public=True,
        data_lookup="description",
    )
    literature = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="literature",
        help_text="literature",
    ).set_extra(
        is_public=True,
        data_lookup="literature",
    )
    reference = models.ManyToManyField(
        ZoteroReference,
        blank=True,
        verbose_name="Literatur",
        help_text="please provide some",
        related_name="reference_for_quarry",
    )
    open_access = models.BooleanField(
        default=False,
        blank=True,
        null=True,
        verbose_name="open access",
        help_text="open access",
    ).set_extra(
        is_public=True,
        data_lookup="open_access",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:
        ordering = [
            "name",
        ]
        verbose_name = "Quarry"

    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:quarry_browse")

    @classmethod
    def get_source_table(self):
        return "./archiv/data/Quarry.csv"

    @classmethod
    def get_natural_primary_key(self):
        return "name"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:quarry_create")

    def get_absolute_url(self):
        return reverse("archiv:quarry_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:quarry_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:quarry_edit", kwargs={"pk": self.id})

    def get_next(self):
        next = next_in_order(self)
        if next:
            return next.get_absolute_url()
        return False

    def get_prev(self):
        prev = prev_in_order(self)
        if prev:
            return prev.get_absolute_url()
        return False


class QuarryGroup(models.Model):
    """nan"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    name = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="name",
        help_text="name of the quarry group",
    ).set_extra(
        is_public=True,
        data_lookup="name",
    )
    description = models.TextField(
        blank=True,
        null=True,
        verbose_name="description",
        help_text="description of the quarry group",
    ).set_extra(
        is_public=True,
        data_lookup="description",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:
        ordering = [
            "name",
        ]
        verbose_name = "QuarryGroup"

    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:quarrygroup_browse")

    @classmethod
    def get_source_table(self):
        return "./archiv/data/Quarry_group.csv"

    @classmethod
    def get_natural_primary_key(self):
        return "name"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:quarrygroup_create")

    def get_absolute_url(self):
        return reverse("archiv:quarrygroup_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:quarrygroup_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:quarrygroup_edit", kwargs={"pk": self.id})

    def get_next(self):
        next = next_in_order(self)
        if next:
            return next.get_absolute_url()
        return False

    def get_prev(self):
        prev = prev_in_order(self)
        if prev:
            return prev.get_absolute_url()
        return False


class Sample(models.Model):
    """nan"""

    legacy_id = models.CharField(max_length=300, blank=True, verbose_name="Legacy ID")
    oeai_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="OeAI inventory number",
        help_text="OeAI inventory number; unique",
    ).set_extra(
        is_public=True,
        data_lookup="oeai_inventory_number",
    )
    smell = models.ForeignKey(
        SkosConcept,
        related_name="rvn_sample_smell_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="smell",
        help_text="smell of the sample; entries from 0 to 4",
    ).set_extra(
        is_public=True,
        data_lookup="smell",
    )
    grain_size_min = models.ForeignKey(
        SkosConcept,
        related_name="rvn_sample_grain_size_min_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="grain size min",
        help_text="minimum grain size; controlled vocabulary",
    ).set_extra(
        is_public=True,
        data_lookup="grain_size_min",
    )
    grain_size_max = models.ForeignKey(
        SkosConcept,
        related_name="rvn_sample_grain_size_max_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="grain size max",
        help_text="maximum grain size; controlled vocabulary",
    ).set_extra(
        is_public=True,
        data_lookup="grain_size_max",
    )
    material = models.ForeignKey(
        SkosConcept,
        related_name="rvn_sample_material_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="material",
        help_text="material of the sample; controlled vocabulary",
    ).set_extra(
        is_public=True,
        data_lookup="material",
    )
    color = models.ForeignKey(
        SkosConcept,
        related_name="rvn_sample_color_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="color",
        help_text="color of the sample; controlled vocabulary",
    ).set_extra(
        is_public=True,
        data_lookup="color",
    )
    color_description = models.TextField(
        blank=True,
        null=True,
        verbose_name="color description",
        help_text="precise description of the color",
    ).set_extra(
        is_public=True,
        data_lookup="color_description",
    )
    color_kodak = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="color kodak",
        help_text="more detailed information about the kodak color",
    ).set_extra(
        is_public=True,
        data_lookup="color_kodak",
    )
    stdcolor = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="color stdcolor",
        help_text="more detailed information about the kodak color",
    ).set_extra(
        is_public=True,
        data_lookup="stdcolor_kodak",
    )
    weight = models.DecimalField(
        max_digits=19,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="weight",
        help_text="weight of the sample",
    ).set_extra(
        is_public=True,
        data_lookup="weight",
    )
    artefakt_id = models.ForeignKey(
        "Artifact",
        related_name="rvn_sample_artefakt_id_artifact",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="artefact",
        help_text="sampled artefact",
    ).set_extra(
        is_public=True,
        data_lookup="artefakt_id",
    )
    quarry = models.ForeignKey(
        "Quarry",
        related_name="rvn_sample_quarry_quarry",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="quarry",
        help_text="sampled quarry",
    ).set_extra(
        is_public=True,
        data_lookup="quarry",
    )
    quarry_group = models.ForeignKey(
        "QuarryGroup",
        related_name="rvn_sample_quarry_group_quarrygroup",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="quarry group",
        help_text="quarry group",
    ).set_extra(
        is_public=True,
        data_lookup="quarry_group",
    )
    notes = models.TextField(
        blank=True,
        null=True,
        verbose_name="notes",
        help_text="notes",
    ).set_extra(
        is_public=True,
        data_lookup="notes",
    )
    sampling = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="sampling",
        help_text="information about the sampling",
    ).set_extra(
        is_public=True,
        data_lookup="sampling",
    )
    literature = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="literature",
        help_text="literature",
    ).set_extra(
        is_public=True,
        data_lookup="literature",
    )
    reference = models.ManyToManyField(
        ZoteroReference,
        blank=True,
        verbose_name="Literatur",
        help_text="please provide some",
        related_name="reference_for_sample",
    )
    image = models.CharField(
        max_length=250,
        blank=True,
        null=True,
        verbose_name="images",
        help_text="images",
    ).set_extra(
        is_public=True,
        data_lookup="images",
    )
    open_access = models.BooleanField(
        default=False,
        blank=True,
        null=True,
        verbose_name="open access",
        help_text="open access",
    ).set_extra(
        is_public=True,
        data_lookup="open_access",
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:
        ordering = [
            "id",
        ]
        verbose_name = "Sample"

    def __str__(self):
        if self.oeai_inventory_number:
            return "{}".format(self.oeai_inventory_number)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:sample_browse")

    @classmethod
    def get_source_table(self):
        return "./archiv/data/Sample.csv"

    @classmethod
    def get_natural_primary_key(self):
        return "oeai_inventory_number"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:sample_create")

    def get_absolute_url(self):
        return reverse("archiv:sample_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:sample_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:sample_edit", kwargs={"pk": self.id})

    def get_next(self):
        next = next_in_order(self)
        if next:
            return next.get_absolute_url()
        return False

    def get_prev(self):
        prev = prev_in_order(self)
        if prev:
            return prev.get_absolute_url()
        return False
